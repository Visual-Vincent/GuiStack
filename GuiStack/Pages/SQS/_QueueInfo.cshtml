@using GuiStack.Models
@using GuiStack.Extensions
@model SQSQueueInfo

<table class="gs-info-table colored">
    <tbody>
        <tr>
            <td>Type</td>
            <td>@(Model.FifoQueue ? "FIFO" : "Standard")</td>
        </tr>
        <tr>
            <td>ARN</td>
            <td>@Model.QueueARN</td>
        </tr>
        <tr>
            <td>URL</td>
            <td>@Model.QueueURL</td>
        </tr>
        <tr>
            <td>Messages available ~</td>
            <td>@Model.ApproximateNumberOfMessages</td>
        </tr>
        <tr>
            <td>Messages in flight ~</td>
            <td>@Model.ApproximateNumberOfMessagesNotVisible</td>
        </tr>
        <tr>
            <td>Delayed messages ~</td>
            <td>@Model.ApproximateNumberOfMessagesDelayed</td>
        </tr>
    </tbody>
    <tbody class="additional-info">
        <tr>
            <td>Created</td>
            <td>@Model.CreatedTimestamp</td>
        </tr>
        <tr>
            <td>Last updated</td>
            <td>@Model.LastModifiedTimestamp</td>
        </tr>
        <tr>
            <td>Maximum message size</td>
            <td>@Model.MaximumMessageSize.ToFormattedFileSize()</td>
        </tr>
        <tr>
            <td>Delivery delay</td>
            <td>@TimeSpan.FromSeconds(Model.DelaySeconds).ToFormattedString()</td>
        </tr>
        <tr>
            <td>Default receive wait time</td>
            <td>@TimeSpan.FromSeconds(Model.ReceiveMessageWaitTimeSeconds).ToFormattedString()</td>
        </tr>
        <tr>
            <td>Default visibility timeout</td>
            <td>@TimeSpan.FromSeconds(Model.VisibilityTimeout).ToFormattedString()</td>
        </tr>
        <tr>
            <td>Message retention period</td>
            <td>@TimeSpan.FromSeconds(Model.MessageRetentionPeriod).ToFormattedString()</td>
        </tr>
    </tbody>
    <tbody>
        <tr class="expand-button text-center collapsed">
            <td colspan="2">
                <a no-href onclick="gsevent_InfoTable_ToggleButton_Click(event)">
                    View more <i class="fa-solid fa-angles-down" style="font-size: 12px"></i>
                </a>
            </td>
        </tr>
        <tr class="expand-button text-center expanded">
            <td colspan="2">
                <a no-href onclick="gsevent_InfoTable_ToggleButton_Click(event)">
                    View less <i class="fa-solid fa-angles-up" style="font-size: 12px"></i>
                </a>
            </td>
        </tr>
    </tbody>
</table>

<div class="gs-tab-control">
    <div class="gs-tab-container">
        <div class="gs-tabitem selected" data-tabpage="sqs-send">Send</div>
        <div class="gs-tabitem" data-tabpage="sqs-peek">Peek</div>
        <div class="gs-tabitem" data-tabpage="sqs-receive">Receive (destructive)</div>
    </div>

    <div id="sqs-send" class="gs-tabpage selected">
        <table class="gs-info-table">
            <tbody>
                <tr>
                    <td class="additional-info"></td>
                    <td></td>
                    <td class="text-right">
                        <div>
                            Syntax highlighting:
                            <select class="lang-select">
                                <option value="plaintext" selected>Plain Text</option>
                                <option value="json">JSON</option>
                                <option value="xml">XML</option>
                                <option value="protojson">Protobuf (JSON)</option>
                            </select>
                        </div>
                        <div class="definition-box hidden" style="margin-top: 4px">
                            Selected definition: <span class="definition-label" style="color: #00E0FF"></span>
                        </div>
                    </td>
                    <td></td>
                </tr>
                <tr>
                    <td class="additional-info" style="vertical-align: top; height: 1px">
                        <div class="gs-drop-container" style="display: flex; flex-direction: column; height: 100%">
                            <div class="gs-drop-overlay">
                                Drop Protobuf file(s)
                            </div>
                            <form>
                                <a no-href class="gs-upload-field">
                                    <i class="bi bi-plus-circle"></i> Add definition(s)...
                                    <input type="file" id="sqs-protobuf-fileupload" multiple />
                                </a>
                            </form>
                            @*                                    calc(height - fontsize * lineheight - padding * 2 - border * 2 - scrollbar)*@
                            <div style="width: 200px; max-height: calc(400px - 1em * 1.2 - 8px * 2 - 1px * 2 - 16px); overflow: auto">
                                <partial name="~/Pages/_ProtobufListPartial.cshtml" />
                            </div>
                        </div>
                    </td>
                    <td class="collapsed">
                        <a no-href class="vertical" onclick="sqs_ProtobufPanel_Toggle(event)">
                            <i class="fa-solid fa-angles-down" style="font-size: 12px"></i> Protobuf <i class="fa-solid fa-angles-down" style="font-size: 12px"></i>
                        </a>
                    </td>
                    <td class="expanded">
                        <a no-href class="vertical" onclick="sqs_ProtobufPanel_Toggle(event)">
                            <i class="fa-solid fa-angles-up" style="font-size: 12px"></i> Protobuf <i class="fa-solid fa-angles-up" style="font-size: 12px"></i>
                        </a>
                    </td>
                    <td style="width: 100%">
                        <div class="gs-sqs-message-contents" placeholder="Enter message"></div>
                    </td>
                    <td style="vertical-align: top">
                        <a no-href class="gs-button lnk-sqs-send" style="display: block; margin-left: 8px; margin-bottom: 8px">Send</a>
                        <input id="sqs-send-as-base64" type="checkbox" />
                        <label for="sqs-send-as-base64" title="Send message as a Base64-encoded string">Base64</label>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <div id="sqs-peek" class="gs-tabpage">
        <div class="gs-block-grid" style="margin-bottom: 8px">
            <div>Max message count: <input class="input-max-msgs" type="number" min="1" max="10" value="1" /></div>
            <div>Max wait time (seconds): <input class="input-wait-secs" type="number" min="0" max="20" value="0" /></div>
            <a no-href class="gs-button lnk-sqs-peek">Peek</a>
        </div>

        <div class="peek-container"></div>
    </div>

    <div id="sqs-receive" class="gs-tabpage">
        <div class="gs-block-grid" style="margin-bottom: 8px">
            <div>Max message count: <input class="input-max-msgs" type="number" min="1" max="10" value="1" /></div>
            <div>Max wait time (seconds): <input class="input-wait-secs" type="number" min="0" max="20" value="0" /></div>
            <a no-href class="gs-button lnk-sqs-receive">Receive</a>
        </div>

        <div class="receive-container"></div>
    </div>
</div>

<script type="text/javascript">
    var __sqsSendMessageEditor = null;
    var __sqsSendPage = document.getElementById("sqs-send");

    var peekContainer = $("#sqs-peek .peek-container");
    var receiveContainer = $("#sqs-receive .receive-container");

    var __sqsSendProtobufList = document.querySelector("#sqs-send .gs-protobuf-list");
    var __sqsSendLanguageSelect = document.querySelector("#sqs-send .lang-select");

    $(".lnk-sqs-send").click(sqs_SendMessage_Click);
    $(".lnk-sqs-peek").click(sqs_PeekMessages_Click);
    $(".lnk-sqs-receive").click(sqs_ReceiveMessages_Click);

    $("#sqs-send .lang-select").click(sqs_Send_LanguageSelect);
    $("#sqs-protobuf-fileupload").change(sqs_ProtobufUpload_FilesSelected);

    // jQuery does not work as expected with custom events
    __sqsSendProtobufList.addEventListener("gs.protobuf.selected", sqs_ProtobufList_DefinitionSelected);

    require(["vs/editor/editor.main"], function() {
        __sqsSendMessageEditor = monaco.editor.create(document.querySelector("#sqs-send .gs-sqs-message-contents"), {
            value: "",
            language: "plaintext",
            theme: "vs-dark",
            minimap: {
                enabled: false
            }
        });

        __sqsSendMessageEditor.layout();
    });

    function sqs_SendMessage_Click(event)
    {
        var lang = __sqsSendLanguageSelect.value;
        var data = __sqsSendMessageEditor.getValue();
        var isProtobuf = (lang == "protojson");
        var base64Encode = document.getElementById("sqs-send-as-base64").checked;

        if(isProtobuf)
        {
            try
            {
                var protoPath = __sqsSendPage.getAttribute("data-selected-proto");

                if(isNull(protoPath) || protoPath.length <= 0)
                {
                    gs_DisplayError("No Protobuf definition selected");
                    return;
                }

                var protoRoot = gs_GetProtobufRootDefinition(protoPath);
                var protoType = protoPath
                    .replace(/^proto\/[^\/]+\/?/, "")
                    .replace("/", ".");

                if(protoType.length <= 0)
                    throw "'" + protoPath + "' is not a valid protobuf definition path: Path is too short";

                var root = protobuf.Root.fromJSON(JSON.parse(protoRoot));
                var type = root.lookupType(protoType);
                var payload = JSON.parse(data);
                var message = type.fromObject(payload);

                data = gs_Uint8ArrayToBase64(type.encode(message).finish());
            }
            catch(error)
            {
                gs_DisplayError("An error occurred while constructing the Protobuf message: " + error);
                return;
            }
        }

        $.ajax({
            type: "POST",
            url: "@Url.Action("SendMessage", "Queues", new { queueName = ViewData["QueueName"] ?? "" })",
            contentType: "application/json",
            data: JSON.stringify({
                body: data,
                isProtobuf: isProtobuf,
                base64Encode: base64Encode
            }),
            error: gsevent_AjaxError,
            success: function(result) {
                __sqsSendMessageEditor.setValue("");
            }
        });
    }

    function sqs_PeekMessages_Click(event)
    {
        var parent = event.currentTarget.parentElement;
        var maxAmount = parent.querySelector("input.input-max-msgs").value;
        var waitTime = parent.querySelector("input.input-wait-secs").value;

        $.ajax({
            type: "GET",
            url: window.location.pathName,
            data: {
                handler: "PeekMessagesPartial",
                prefix: "Peek",
                maxAmount: maxAmount,
                waitTimeSeconds: waitTime
            },
            cache: false,
            error: gsevent_AjaxError,
            success: function(result) {
                peekContainer.html(result);
            }
        });
    }

    function sqs_ReceiveMessages_Click(event)
    {
        var parent = event.currentTarget.parentElement;
        var maxAmount = parent.querySelector("input.input-max-msgs").value;
        var waitTime = parent.querySelector("input.input-wait-secs").value;

        $.ajax({
            type: "GET",
            url: window.location.pathName,
            data: {
                handler: "ReceiveMessagesPartial",
                prefix: "Receive",
                maxAmount: maxAmount,
                waitTimeSeconds: waitTime
            },
            cache: false,
            error: gsevent_AjaxError,
            success: function(result) {
                receiveContainer.html(result);
            }
        });
    }

    function sqs_Send_LanguageSelect(event)
    {
        var lang = event.currentTarget.value;
        var parentRow = gs_GetParentTableRow(event.currentTarget, true);
        var definitionBox = parentRow.querySelector(".definition-box");

        if(lang == "protojson")
        {
            lang = "json";
            definitionBox.classList.remove("hidden");
        }
        else
        {
            definitionBox.classList.add("hidden");
        }

        monaco.editor.setModelLanguage(__sqsSendMessageEditor.getModel(), lang);
    }

    function sqs_ProtobufPanel_Toggle(event)
    {
        var editorElement = document.querySelector("#sqs-send .gs-sqs-message-contents");
        gsevent_InfoTable_ToggleButton_Click(event);

        // Force the editor to shrink before resizing
        editorElement.style.width = "1px";
        __sqsSendMessageEditor.layout();
        editorElement.style.removeProperty("width");
        __sqsSendMessageEditor.layout();
    }

    function sqs_ProtobufList_DefinitionSelected(event)
    {
        var protoPath = event.detail.protoPath;
        var protoContents = gs_GetProtobufMessage(protoPath);

        __sqsSendMessageEditor.setValue(protoContents);

        __sqsSendPage.setAttribute("data-selected-proto", event.detail.protoPath);
        __sqsSendPage.querySelector(".definition-label").innerText = event.detail.protoPath;

        gs_SelectOption($(__sqsSendLanguageSelect), "protojson");
    }

    function sqs_ProtobufUpload_FilesSelected(event)
    {
        var element = event.currentTarget;
        var files = element.files;
        var formData = new FormData();

        var cleanup = function() {
            navigator.sendBeacon("@Url.Action("ClearSession", "Proto")");
            document.getElementById("gs-upload-progress-overlay").classList.remove("visible");
        };

        if(files.length <= 0)
            return;

        for(var i = 0; i < files.length; i++)
        {
            formData.append("files", files[i]);
        }

        document.getElementById("gs-upload-progress-overlay").classList.add("visible");

        $.ajax({
            type: "POST",
            url: "@Url.Action("Upload", "Proto")",
            data: formData,
            cache: false,
            processData: false,
            contentType: false,
            error: function(request, status, errorThrown) {
                cleanup();
                gsevent_AjaxError(request, status, errorThrown);
            },
            success: function(result) {
                if(isNull(result))
                {
                    cleanup();
                    gs_DisplayError("Server response was empty");
                    return;
                }

                if(typeof result === "string")
                {
                    cleanup();
                    gs_DisplayError("Response was a string, expected JSON object. Value: " + result);
                    return;
                }

                if(!isNull(result.error))
                {
                    cleanup();
                    gs_DisplayError("An error occurred: " + result.error);
                    return;
                }

                if(!Array.isArray(result))
                {
                    cleanup();
                    gs_DisplayError("Unexpected response: " + JSON.stringify(result));
                    return;
                }

                try
                {
                    var parsed = 0;

                    for(var i = 0; i < result.length; i++)
                    {
                        var filename = result[i];

                        if(typeof filename !== "string")
                            continue;

                        protobuf.load("/api/Proto/Download/" + filename, function(err, root) {
                            if(err)
                            {
                                parsed++;

                                if(parsed >= result.length)
                                    cleanup();

                                gs_DisplayError(
                                    "An error occurred while parsing '" + filename + "'.\n\n" +
                                    "Things to keep in mind if you receive error 404:\n" +
                                    "* Make sure you include all Protobuf files that '" + filename + "' requires in the same request\n" +
                                    "* GuiStack does not support special characters in filenames and thus will convert them to '_'. This will break the importing of such files\n\n" +
                                    "Error message: " + err
                                );
                                return;
                            }

                            try
                            {
                                var packages = root.nested;

                                for(var pkgName in packages)
                                {
                                    if(pkgName === "google")
                                        continue;

                                    var pkgRoot = packages[pkgName];
                                    var rootJObj = pkgRoot.toJSON();
                                    var rootJson = JSON.stringify(rootJObj);
                                    var types = pkgRoot.nested;

                                    localStorage.setItem("protoroot/" + pkgName, rootJson);

                                    for(var typeName in types)
                                    {
                                        var type = types[typeName];

                                        // TODO: How are we going to handle enums?
                                        if(!(type instanceof protobuf.Message || type instanceof protobuf.Type))
                                            continue;

                                        var empty = type.create({});
                                        var obj = type.toObject(empty, {
                                            enums: String,
                                            longs: String,
                                            bytes: String,
                                            defaults: true,
                                            arrays: true,
                                            objects: true
                                        });

                                        var json = JSON.stringify(obj, null, 4);
                                        localStorage.setItem("proto/" + pkgName + "/" + typeName, json);
                                    }
                                }
                            }
                            catch(error)
                            {
                                gs_DisplayError("An error occurred while parsing '" + filename + "': " + error);
                            }

                            parsed++;

                            if(parsed >= result.length)
                            {
                                cleanup();
                                gs_RefreshProtobufList(__sqsSendProtobufList);
                            }
                        });
                    }
                }
                catch(error)
                {
                    cleanup();
                    gs_DisplayError("An error occurred while parsing Protobuf definitions: " + error);
                }
            },
            xhr: function() {
                var xhr = $.ajaxSettings.xhr();

                xhr.upload.addEventListener("progress", function(event) {
                    if(!event.lengthComputable)
                        return;

                    var progress = Math.round(event.loaded / event.total * 100);
                    document.querySelector("#gs-upload-progress-overlay .upload-progress").innerText = progress.toFixed(0) + "%";
                });

                return xhr ;
            }
        });

        element.value = null;
    }
</script>
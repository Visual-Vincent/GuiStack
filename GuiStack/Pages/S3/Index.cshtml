@*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 * 
 * Copyright © Vincent Bengtsson & Contributors 2022-2024
 * https://github.com/Visual-Vincent/GuiStack
 *@

@page "{bucket?}"

@using System.Net
@using Amazon.S3
@using GuiStack.Extensions
@model GuiStack.Pages.S3.IndexModel

@{
    ViewData["Title"] = "S3 Buckets";
    bool hasBucketName = !string.IsNullOrWhiteSpace(Model.Bucket);
}

@if(!hasBucketName)
{ 
    <div id="new-s3-bucket-modal" class="cssWindow dark backdropblur text-center">
        <div class="closeWindowButton"><a no-href onclick="closeParentWindow(event)">×</a></div>

        <h2 class="title">New S3 bucket</h2>
        <p><input type="text" class="name-textbox text-center" maxlength="63" style="width: 400px" /></p>

        <div class="modal-buttons text-center">
            <button onclick="s3_CreateBucket()">Create</button>
        </div>
    </div>
}

@if(hasBucketName)
{
    <p class="gs-object-type">S3 Bucket</p>
    <div style="display: flex; align-items: center">
        <h1 style="margin-top: 0px">@Model.Bucket</h1>
        <div style="text-align: right; font-size: 1.5em; flex-grow: 1">
            <a no-href onclick="document.getElementById('s3-fileupload').click()" class="initial-white neon-green">
                <i class="fa-solid fa-arrow-up-from-bracket"></i>
            </a>
        </div>
    </div>
}
else
{
    <div style="display: flex; align-items: center">
        <h1>S3 buckets</h1>
        <div style="text-align: right; font-size: 1.5em; flex-grow: 1">
            <a no-href onclick="showWindow('new-s3-bucket-modal')" class="gs-icon-stack initial-white neon-green">
                <i class="bi bi-bucket"></i>
                <i class="bi bi-plus-circle-fill gs-icon-overlay stroked" style="color: #000000"></i>
            </a>
        </div>
    </div>
}

<div id="list-container">
    @try
    {
        if(!hasBucketName)
        {
            await Html.RenderPartialAsync("~/Pages/S3/_BucketsTable.cshtml", await Model.S3Repository.GetBucketsAsync());
        }
        else
        {
            <div class="gs-drop-container">
                <div class="gs-drop-overlay">
                    Drop file(s) to upload to S3 bucket
                </div>
                <form>
                    <div class="gs-upload-field invisible">
                        <input type="file" id="s3-fileupload" />
                    </div>
                </form>
                @{ await Html.RenderPartialAsync("~/Pages/S3/_ObjectsTable.cshtml", (await Model.S3Repository.GetObjectsAsync(Model.Bucket)).ToObjectModel(Model.Bucket)); }
            </div>
        }
    }
    catch(AmazonS3Exception ex)
    {
        if(ex.StatusCode == HttpStatusCode.NotFound)
        {
            <h2 class="error-text">Bucket not found</h2>
        }
        else
        {
            if(!hasBucketName)
            {
                <h2 class="error-text">Failed to fetch buckets:</h2>
            }
            else
            {
                <h2 class="error-text">Failed to fetch bucket contents:</h2>
            }

            <p class="error-text">@ex.Message</p>
        }
    }
    catch(Exception ex)
    {
        if(!hasBucketName)
        {
            <h2 class="error-text">Failed to fetch buckets:</h2>
        }
        else
        {
            <h2 class="error-text">Failed to fetch bucket contents:</h2>
        }

        <p class="error-text">@ex.Message</p>
    }
</div>

@if(!hasBucketName)
{
    <script type="text/javascript">
        const URL_CREATE_BUCKET = "@Url.Action("CreateBucket", "Buckets", new { bucketName = "__BUCKETNAME__" })";
        
        async function s3_CreateBucket()
        {
            try
            {
                var bucketName = encodeURIComponent(document.querySelector("#new-s3-bucket-modal .name-textbox").value);
                var url = URL_CREATE_BUCKET.replace("__BUCKETNAME__", bucketName);

                var response = await fetch(url, { method: "POST" });

                if(!response.ok) {
                    throw "Failed to create S3 bucket: Server returned HTTP status " + response.status;
                }

                window.location.reload(true);
            }
            catch(error)
            {
                gs_DisplayError(error);
            }

            closeWindow("new-s3-bucket-modal");
        }
    </script>
}
else
{
    <script type="text/javascript">
        $("#s3-fileupload").change(s3_FileUpload_FilesSelected);

        function s3_FileUpload_FilesSelected(event)
        {
            var element = event.currentTarget;
            var files = element.files;
            var formData = new FormData();

            var cleanup = function() {
                document.getElementById("gs-upload-progress-overlay").classList.remove("visible");
            };

            if(files.length <= 0)
                return;

            formData.append("file", files[0]);

            document.querySelector("#gs-upload-progress-overlay .upload-filename").innerText = files[0].name;
            document.getElementById("gs-upload-progress-overlay").classList.add("visible");

            $.ajax({
                type: "POST",
                url: "@Url.Action("Upload", "Buckets", new { bucketName = Model.Bucket })",
                data: formData,
                cache: false,
                processData: false,
                contentType: false,
                error: function(request, status, errorThrown) {
                    cleanup();
                    gsevent_AjaxError(request, status, errorThrown);
                },
                success: function(result) {
                    if(isNull(result))
                    {
                        cleanup();
                        gs_DisplayError("Server response was empty");
                        return;
                    }

                    if(typeof result === "string")
                    {
                        cleanup();
                        gs_DisplayError("Response was a string, expected JSON object. Value: " + result);
                        return;
                    }

                    if(!isNull(result.error))
                    {
                        cleanup();
                        gs_DisplayError("An error occurred: " + result.error);
                        return;
                    }

                    if(isNull(result.success))
                    {
                        cleanup();
                        gs_DisplayError("Unexpected response: " + JSON.stringify(result));
                        return;
                    }

                    if(!result.success)
                    {
                        cleanup();
                        gs_DisplayError("An unknown error occurred");
                        return;
                    }

                    window.location.reload(true);
                },
                xhr: function() {
                    var xhr = $.ajaxSettings.xhr();

                    xhr.upload.addEventListener("progress", function(event) {
                        if(!event.lengthComputable)
                            return;

                        var progress = Math.round(event.loaded / event.total * 100);
                        document.querySelector("#gs-upload-progress-overlay .upload-progress").innerText = progress.toFixed(0) + "%";
                    });

                    return xhr ;
                }
            });

            element.value = null;
        }
    </script>
}
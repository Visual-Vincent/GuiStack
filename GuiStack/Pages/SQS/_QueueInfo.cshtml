@*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 * 
 * Copyright Â© Vincent Bengtsson & Contributors 2022-2024
 * https://github.com/Visual-Vincent/GuiStack
 *@

@using GuiStack.Models
@using GuiStack.Extensions
@model SQSQueueInfo

<table class="gs-info-table colored">
    <tbody>
        <tr>
            <td>Type</td>
            <td>@(Model.FifoQueue ? "FIFO" : "Standard")</td>
        </tr>
        <tr>
            <td>ARN</td>
            <td>@Model.QueueARN</td>
        </tr>
        <tr>
            <td>URL</td>
            <td>@Model.QueueURL</td>
        </tr>
        <tr>
            <td>Messages available ~</td>
            <td>@Model.ApproximateNumberOfMessages</td>
        </tr>
        <tr>
            <td>Messages in flight ~</td>
            <td>@Model.ApproximateNumberOfMessagesNotVisible</td>
        </tr>
        <tr>
            <td>Delayed messages ~</td>
            <td>@Model.ApproximateNumberOfMessagesDelayed</td>
        </tr>
    </tbody>
    <tbody class="additional-info">
        <tr>
            <td>Created</td>
            <td>@Model.CreatedTimestamp</td>
        </tr>
        <tr>
            <td>Last updated</td>
            <td>@Model.LastModifiedTimestamp</td>
        </tr>
        <tr>
            <td>Maximum message size</td>
            <td>@Model.MaximumMessageSize.ToFormattedFileSize()</td>
        </tr>
        <tr>
            <td>Delivery delay</td>
            <td>@TimeSpan.FromSeconds(Model.DelaySeconds).ToFormattedString()</td>
        </tr>
        <tr>
            <td>Default receive wait time</td>
            <td>@TimeSpan.FromSeconds(Model.ReceiveMessageWaitTimeSeconds).ToFormattedString()</td>
        </tr>
        <tr>
            <td>Default visibility timeout</td>
            <td>@TimeSpan.FromSeconds(Model.VisibilityTimeout).ToFormattedString()</td>
        </tr>
        <tr>
            <td>Message retention period</td>
            <td>@TimeSpan.FromSeconds(Model.MessageRetentionPeriod).ToFormattedString()</td>
        </tr>
    </tbody>
    <tbody>
        <tr class="expand-button text-center collapsed">
            <td colspan="2">
                <a no-href onclick="gsevent_InfoTable_ToggleButton_Click(event)">
                    View more <i class="fa-solid fa-angles-down" style="font-size: 12px"></i>
                </a>
            </td>
        </tr>
        <tr class="expand-button text-center expanded">
            <td colspan="2">
                <a no-href onclick="gsevent_InfoTable_ToggleButton_Click(event)">
                    View less <i class="fa-solid fa-angles-up" style="font-size: 12px"></i>
                </a>
            </td>
        </tr>
    </tbody>
</table>

<div class="gs-tab-control">
    <div class="gs-tab-container">
        <div class="gs-tabitem selected" data-tabpage="sqs-send">Send</div>
        <div class="gs-tabitem" data-tabpage="sqs-peek">Peek</div>
        <div class="gs-tabitem" data-tabpage="sqs-receive">Receive (destructive)</div>
    </div>

    <div id="sqs-send" class="gs-tabpage selected">
        @{ await Html.RenderPartialAsync("~/Pages/SQS/_MessageEditorPartial.cshtml", new SQSMessageEditorModel("sqs-send-message-editor", "__sqsSendMessageEditor", "__sqsSendMessageTextEditor")); }
    </div>

    <div id="sqs-peek" class="gs-tabpage">
        <div class="gs-block-grid" style="margin-bottom: 8px">
            <div>Max message count: <input class="input-max-msgs" type="number" min="1" max="10" value="1" /></div>
            <div>Max wait time (seconds): <input class="input-wait-secs" type="number" min="0" max="20" value="0" /></div>
            <a no-href class="gs-button lnk-sqs-peek">Peek</a>
        </div>

        <div class="peek-container"></div>
    </div>

    <div id="sqs-receive" class="gs-tabpage">
        <div class="gs-block-grid" style="margin-bottom: 8px">
            <div>Max message count: <input class="input-max-msgs" type="number" min="1" max="10" value="1" /></div>
            <div>Max wait time (seconds): <input class="input-wait-secs" type="number" min="0" max="20" value="0" /></div>
            <a no-href class="gs-button lnk-sqs-receive">Receive</a>
        </div>

        <div class="receive-container"></div>
    </div>
</div>

<script type="text/javascript">
    var __sqsSendPage = document.getElementById("sqs-send");
    var __sqsSendLanguageSelect = __sqsSendMessageEditor.querySelector(".lang-select");
    var __sqsSendButton = __sqsSendMessageEditor.querySelector(".lnk-sqs-send");

    var peekContainer = $("#sqs-peek .peek-container");
    var receiveContainer = $("#sqs-receive .receive-container");

    $(".lnk-sqs-peek").click(sqs_PeekMessages_Click);
    $(".lnk-sqs-receive").click(sqs_ReceiveMessages_Click);

    __sqsSendButton.addEventListener("click", sqs_SendMessage_Click);

    function sqs_SendMessage_Click(event)
    {
        var lang = __sqsSendLanguageSelect.value;
        var data = __sqsSendMessageTextEditor.getValue();
        var isProtobuf = (lang == "protojson");
        var base64Encode = __sqsSendMessageEditor.querySelector(".sqs-send-as-base64").checked;

        if(isProtobuf)
        {
            try
            {
                var protoPath = __sqsSendMessageEditor.getAttribute("data-selected-proto");

                if(isNull(protoPath) || protoPath.length <= 0)
                {
                    gs_DisplayError("No Protobuf definition selected");
                    return;
                }

                var protoRoot = gs_GetProtobufRootDefinition(protoPath);
                var protoType = protoPath
                    .replace(/^proto\/[^\/]+\/?/, "")
                    .replace("/", ".");

                if(protoType.length <= 0)
                    throw "'" + protoPath + "' is not a valid protobuf definition path: Path is too short";

                var root = protobuf.Root.fromJSON(JSON.parse(protoRoot));
                var type = root.lookupType(protoType);
                var payload = JSON.parse(data);
                var message = type.fromObject(payload);

                data = gs_Uint8ArrayToBase64(type.encode(message).finish());
            }
            catch(error)
            {
                gs_DisplayError("An error occurred while constructing the Protobuf message: " + error);
                return;
            }
        }

        $.ajax({
            type: "POST",
            url: "@Url.Action("SendMessage", "Queues", new { queueName = ViewData["QueueName"] ?? "" })",
            contentType: "application/json",
            data: JSON.stringify({
                body: data,
                isProtobuf: isProtobuf,
                base64Encode: base64Encode
            }),
            error: gsevent_AjaxError,
            success: function(result) {
                __sqsSendMessageTextEditor.setValue("");
            }
        });
    }

    function sqs_PeekMessages_Click(event)
    {
        var parent = event.currentTarget.parentElement;
        var maxAmount = parent.querySelector("input.input-max-msgs").value;
        var waitTime = parent.querySelector("input.input-wait-secs").value;

        $.ajax({
            type: "GET",
            url: window.location.pathName,
            data: {
                handler: "PeekMessagesPartial",
                prefix: "Peek",
                maxAmount: maxAmount,
                waitTimeSeconds: waitTime
            },
            cache: false,
            error: gsevent_AjaxError,
            success: function(result) {
                peekContainer.html(result);
            }
        });
    }

    function sqs_ReceiveMessages_Click(event)
    {
        var parent = event.currentTarget.parentElement;
        var maxAmount = parent.querySelector("input.input-max-msgs").value;
        var waitTime = parent.querySelector("input.input-wait-secs").value;

        $.ajax({
            type: "GET",
            url: window.location.pathName,
            data: {
                handler: "ReceiveMessagesPartial",
                prefix: "Receive",
                maxAmount: maxAmount,
                waitTimeSeconds: waitTime
            },
            cache: false,
            error: gsevent_AjaxError,
            success: function(result) {
                receiveContainer.html(result);
            }
        });
    }
</script>
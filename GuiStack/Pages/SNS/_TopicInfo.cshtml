@*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 *
 * Copyright © Vincent Bengtsson & Contributors 2022-2024
 * https://github.com/Visual-Vincent/GuiStack
 *@

@using Amazon;
@using GuiStack.Models
@using GuiStack.Extensions
@using GuiStack.Repositories
@model SNSTopicModel

<div id="sns-subscribe-to-sqs-modal" class="cssWindow dark backdropblur text-center">
    <div class="closeWindowButton"><a no-href onclick="closeParentWindow(event)">×</a></div>

    <h2 class="title">Subscribe SQS queue to Topic</h2>
    <div class="queue-selector-container text-left" style="margin-top: 16px; margin-bottom: 16px">
        Loading queues...
    </div>
    
    <p>
        <input type="checkbox" id="sns-subscribe-to-sqs-raw-delivery-checkbox" />
        <label for="sns-subscribe-to-sqs-raw-delivery-checkbox">Raw message delivery</label>
    </p>

    <div class="modal-buttons text-center">
        <button onclick="sns_CreateSubscription_Click()">Create subscription</button>
    </div>
</div>

@{
    await Html.RenderPartialAsync("~/Pages/Shared/_DeleteModal.cshtml", new DeleteModalModel("delete-sns-subscription-modal"));
}

<table class="gs-info-table colored">
    <tbody>
        <tr>
            <td>Type</td>
            <td>@(Model.Topic.FifoTopic ? "FIFO" : "Standard")</td>
        </tr>
        <tr>
            <td>ARN</td>
            <td>@Model.Topic.TopicARN</td>
        </tr>
        <tr>
            <td>Content-based deduplication</td>
            <td>@(Model.Topic.FifoTopic ? (Model.Topic.ContentBasedDeduplication ? "Yes" : "No") : "N/A")</td>
        </tr>
        <tr>
            <td>Active subscriptions</td>
            <td>@Model.Topic.SubscriptionsConfirmed</td>
        </tr>
    </tbody>
    <tbody class="additional-info">
        <tr>
            <td>Pending subscriptions</td>
            <td>@Model.Topic.SubscriptionsPending</td>
        </tr>
        <tr>
            <td>Deleted subscriptions</td>
            <td>@Model.Topic.SubscriptionsDeleted</td>
        </tr>
    </tbody>
    <tbody>
        <tr class="expand-button text-center collapsed">
            <td colspan="2">
                <a no-href onclick="gsevent_InfoTable_ToggleButton_Click(event)">
                    View more <i class="fa-solid fa-angles-down" style="font-size: 12px"></i>
                </a>
            </td>
        </tr>
        <tr class="expand-button text-center expanded">
            <td colspan="2">
                <a no-href onclick="gsevent_InfoTable_ToggleButton_Click(event)">
                    View less <i class="fa-solid fa-angles-up" style="font-size: 12px"></i>
                </a>
            </td>
        </tr>
    </tbody>
</table>

<div class="gs-tab-control">
    <div class="gs-tab-container">
        <div class="gs-tabitem selected" data-tabpage="sns-send">Send</div>
        <div class="gs-tabitem" data-tabpage="sns-subscriptions">Subscriptions</div>
    </div>

    <div id="sns-send" class="gs-tabpage selected">
        @{ await Html.RenderPartialAsync("~/Pages/SQS/_MessageEditorPartial.cshtml", new SQSMessageEditorModel("sns-send-message-editor", "__snsSendMessageEditor", "__snsSendMessageTextEditor")); }
    </div>

    <div id="sns-subscriptions" class="gs-tabpage">
        <div style="display: flex; align-items: center">
            <h2>Subscriptions</h2>
            <div style="text-align: right; font-size: 1.5em; flex-grow: 1">
                <a no-href onclick="showWindow('sns-subscribe-to-sqs-modal')" class="gs-icon-stack initial-white neon-green">
                    <i class="fa-solid fa-list-check" style="margin-right: 4px"></i>
                    <i class="bi bi-plus-circle-fill gs-icon-overlay stroked" style="color: #000000"></i>
                </a>
            </div>
        </div>

        @if(Model.Subscriptions != null && Model.Subscriptions.Any())
        {
            <table class="gs-list padded autosize-all-cols-but-first">
                <thead>
                    <tr>
                        <th>Endpoint</th>
                        <th>Protocol</th>
                        <th>Raw Delivery</th>
                        <th>Owner</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var subscription in Model.Subscriptions.OrderBy(s => s.Protocol).ThenBy(s => s.Endpoint))
                    {
                        <tr data-arn="@subscription.Arn" data-endpoint="@subscription.Endpoint">
                            <td>
                                @switch(subscription.Protocol?.ToLower() ?? "")
                                {
                                    case "sqs":
                                    {
                                        if(!Arn.TryParse(subscription.Endpoint, out var arn))
                                            goto default;

                                        <a href="/SQS/@arn.Resource"><i class="fa-solid fa-database gs-rotate-270" style="margin-right: 2px"></i> @arn.Resource</a>
                                        break;
                                    }

                                    default:
                                        @subscription.Endpoint
                                        break;
                                }
                            </td>
                            <td>@subscription.Protocol</td>
                            <td>@(subscription.RawMessageDelivery ? "Yes" : "No")</td>
                            <td>@(!string.IsNullOrWhiteSpace(subscription.Owner) ? subscription.Owner : "(unknown)")</td>
                            <td>
                                <div class="gs-icons">
                                    <a no-href class="purple lnk-sns-sub-copyarn" title="Copy Endpoint address/ARN">
                                        <i class="fa-solid fa-link"></i>
                                    </a>
                                    <a no-href class="red lnk-sns-sub-delete" title="Delete">
                                        <i class="fa-solid fa-trash-can"></i>
                                    </a>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <text>No active subscriptions</text>
        }
    </div>
</div>

<script type="text/javascript">
    const SNS_URL_DELETE_SUBSCRIPTION = "@Url.Action("DeleteSubscription", "Subscriptions", new { subscriptionArn = "__SUBSCRIPTIONARN__" })";

    var prompt_SubscriptionArn;

    var __snsSendLanguageSelect = __snsSendMessageEditor.querySelector(".lang-select");
    var __snsSendButton = __snsSendMessageEditor.querySelector(".lnk-sqs-send");

    var subscribeToSqsModal = document.getElementById("sns-subscribe-to-sqs-modal");
    var queueSelectorContainer = $("#sns-subscribe-to-sqs-modal .queue-selector-container");

    __snsSendButton.addEventListener("click", sns_SendMessage_Click);

    $(".lnk-sns-sub-copyarn").click(sns_CopySubscriptionArn);
    $(".lnk-sns-sub-delete").click(sns_DeleteSubscriptionPrompt);
    $("#delete-sns-subscription-modal .yes-button").click(sns_DeleteSubscription);

    subscribeToSqsModal.addEventListener("windowopened", function() {
        $.ajax({
            type: "GET",
            url: "@Url.Page("/SQS/Index")",
            data: {
                handler: "QueueSelectorPartial"
            },
            cache: false,
            error: gsevent_AjaxError,
            success: function(result) {
                queueSelectorContainer.html(result);
            }
        });
    });

    subscribeToSqsModal.addEventListener("windowclosed", function() {
        queueSelectorContainer.html("Loading queues...");
    });

    function sns_SendMessage_Click(event)
    {
        var lang = __snsSendLanguageSelect.value;
        var data = __snsSendMessageTextEditor.getValue();
        var isProtobuf = (lang == "protojson");
        var base64Encode = __snsSendMessageEditor.querySelector(".sqs-send-as-base64").checked;

        if(isProtobuf)
        {
            try
            {
                var protoPath = __snsSendMessageEditor.getAttribute("data-selected-proto");

                if(isNull(protoPath) || protoPath.length <= 0)
                {
                    gs_DisplayError("No Protobuf definition selected");
                    return;
                }

                var protoRoot = gs_GetProtobufRootDefinition(protoPath);
                var protoType = protoPath
                    .replace(/^proto\/[^\/]+\/?/, "")
                    .replace("/", ".");

                if(protoType.length <= 0)
                    throw "'" + protoPath + "' is not a valid protobuf definition path: Path is too short";

                var root = protobuf.Root.fromJSON(JSON.parse(protoRoot));
                var type = root.lookupType(protoType);
                var payload = JSON.parse(data);
                var message = type.fromObject(payload);

                data = gs_Uint8ArrayToBase64(type.encode(message).finish());
            }
            catch(error)
            {
                gs_DisplayError("An error occurred while constructing the Protobuf message: " + error);
                return;
            }
        }

        $.ajax({
            type: "POST",
            url: "@Url.Action("SendMessage", "Topics", new { topicArn = Model.Topic.TopicARN.ToString() ?? "" })",
            contentType: "application/json",
            data: JSON.stringify({
                body: data,
                isProtobuf: isProtobuf,
                base64Encode: base64Encode
            }),
            error: gsevent_AjaxError,
            success: function(result) {
                __snsSendMessageTextEditor.setValue("");
            }
        });
    }

    async function sns_CreateSubscription_Click()
    {
        var selectedItem = gs_GetSelectedTableItem(queueSelectorContainer[0]);

        if(isNull(selectedItem))
        {
            alert("No queue selected");
            return;
        }

        var queueUrl = selectedItem.getAttribute("data-url");
        var rawMessageDelivery = document.getElementById("sns-subscribe-to-sqs-raw-delivery-checkbox").checked;

        try
        {
            var response = await fetch("@Url.Action("CreateSubscription", "Subscriptions")", {
                method: "POST",
                headers: new Headers({ "Content-Type": "application/json" }),
                body: JSON.stringify({
                    topicArn: "@Model.Topic.TopicARN",
                    protocol: "sqs",
                    endpoint: queueUrl,
                    rawMessageDelivery: rawMessageDelivery
                })
            });

            if(!response.ok) {
                throw "Failed to create SNS subscription: Server returned HTTP status " + response.status;
            }

            window.location.reload(true);
        }
        catch(error)
        {
            gs_DisplayError(error);
        }

        closeWindow("sns-subscribe-to-sqs-modal");
    }

    function sns_CopySubscriptionArn(event)
    {
        try
        {
            var arn = gs_GetParentTableRow(event.currentTarget, true).getAttribute("data-arn");
            navigator.clipboard.writeText(arn);
        }
        catch(error)
        {
            gs_DisplayError(error);
        }
    }

    function sns_DeleteSubscriptionPrompt(event)
    {
        try
        {
            var objNameElement = document.querySelector("#delete-sns-subscription-modal .title .object-name");
            var parentRow = gs_GetParentTableRow(event.currentTarget, true);
            var endpoint = parentRow.getAttribute("data-endpoint");

            prompt_SubscriptionArn = parentRow.getAttribute("data-arn");

            objNameElement.innerHTML = '<span style="color: #FFFFFF">the subscription</span> ' + endpoint;
            showWindow("delete-sns-subscription-modal");
        }
        catch(error)
        {
            gs_DisplayError(error);
        }
    }

    async function sns_DeleteSubscription()
    {
        try
        {
            var subscriptionArn = encodeURIComponent(prompt_SubscriptionArn);

            var url = SNS_URL_DELETE_SUBSCRIPTION
                .replace("__SUBSCRIPTIONARN__", subscriptionArn);

            var response = await fetch(url, { method: "DELETE" });

            if(!response.ok) {
                throw "Failed to delete SNS subscription: Server returned HTTP status " + response.status;
            }

            window.location.reload(true);
        }
        catch(error)
        {
            gs_DisplayError(error);
        }

        closeWindow("delete-sns-subscription-modal");
    }
</script>
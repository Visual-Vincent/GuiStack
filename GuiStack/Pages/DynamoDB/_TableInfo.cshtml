@*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 *
 * Copyright Â© Vincent Bengtsson & Contributors 2024
 * https://github.com/Visual-Vincent/GuiStack
 *@

@using GuiStack.Extensions;
@using GuiStack.Models;
@model DynamoDBTableModel

@{
    await Html.RenderPartialAsync("~/Pages/Shared/_DeleteModal.cshtml", new DeleteModalModel("delete-dynamodb-row-modal"));
    await Html.RenderPartialAsync("~/Pages/DynamoDB/_FieldsEditorModal.cshtml", new FieldsEditorModalModel("dynamodb-update-item-modal", "UpdateItem", "Update item", "Save"));
}

<table class="gs-info-table colored">
    <tbody>
        <tr>
            <td>Status</td>
            <td>@Model.Status</td>
        </tr>
        <tr>
            <td>ARN</td>
            <td>@Model.Arn</td>
        </tr>
        <tr>
            <td>Partition key</td>
            <td>@Model.PartitionKey.Name (@Model.PartitionKey.Type)</td>
        </tr>
        <tr>
            <td>Sort key</td>
            <td>
                @if(Model.SortKey != null)
                {
                    <text>@Model.SortKey.Name (@Model.SortKey.Type)</text>
                }
                else
                {
                    <text>(none)</text>
                }
            </td>
        </tr>
        <tr>
            <td>Item count</td>
            <td>@Model.ItemCount <span class="gs-object-type">(updated every ~6 hours)</span></td>
        </tr>
        <tr>
            <td>Table size</td>
            <td>@Model.TableSizeBytes.ToFormattedFileSize() <span class="gs-object-type">(updated every ~6 hours)</span></td>
        </tr>
    </tbody>
    <tbody class="additional-info">
        <tr>
            <td>Table class</td>
            <td>@Model.TableClass</td>
        </tr>
        <tr>
            <td>Capacity mode</td>
            <td>@Model.BillingMode</td>
        </tr>
        <tr>
            <td>Provisioned read capacity</td>
            <td>@(Model.ReadCapacityUnits > 0 ? $"{Model.ReadCapacityUnits} RCU" : "N/A")</td>
        </tr>
        <tr>
            <td>Provisioned write capacity</td>
            <td>@(Model.WriteCapacityUnits > 0 ? $"{Model.WriteCapacityUnits} WCU" : "N/A")</td>
        </tr>
        <tr>
            <td>Deletion protection</td>
            <td>@(Model.DeletionProtectionEnabled ? "Yes" : "No")</td>
        </tr>
    </tbody>
    <tbody>
        <tr class="expand-button text-center collapsed">
            <td colspan="2">
                <a no-href onclick="gsevent_InfoTable_ToggleButton_Click(event)">
                    View more <i class="fa-solid fa-angles-down" style="font-size: 12px"></i>
                </a>
            </td>
        </tr>
        <tr class="expand-button text-center expanded">
            <td colspan="2">
                <a no-href onclick="gsevent_InfoTable_ToggleButton_Click(event)">
                    View less <i class="fa-solid fa-angles-up" style="font-size: 12px"></i>
                </a>
            </td>
        </tr>
    </tbody>
</table>

<hr/>

<div style="text-align: right; font-size: 1.5em; margin: 10px 8px 8px 8px">
    <a no-href class="initial-white neon-green" title="Add new item" style="margin-right: 4px">
        <i class="fa-solid fa-plus"></i>
    </a>
    <a no-href onclick="dynamodb_UpdateItems()" class="initial-white neon-green" title="Refresh">
        <i class="fa-solid fa-rotate"></i>
    </a>
</div>

<div id="gs-dynamodb-items-list"></div>

<script type="text/javascript">
    const DYNAMODB_URL_GET_ITEMS = "@Url.Action("GetItems", "Tables", new { tableName = Model.Name })?limit=__LIMIT__&lastEvaluatedKey=__LASTKEY__";
    const DYNAMODB_URL_UPDATE_ITEM = "@Url.Action("UpdateItem", "Tables", new { tableName = Model.Name })";

    const DynamoDB_LoadingTemplate =
        `<div class="gs-loading-box" style="font-size: 1.5em">
            <img class="spinner" src="/img/loading_wheel.apng"/>Loading...
        </div>`;

    const DynamoDB_TableTemplate =
        `<table class="gs-list padded autosize-last-col dynamodb-table-contents">
            <thead>
                <tr>
                    {{HEADERS_HTML}}
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                {{BODY_HTML}}
            </tbody>
        </table>
        {{ADDITIONAL_HTML}}`;

    const DynamoDB_ItemTemplate =
        `<tr class="dynamodb-row" data-partitionkey="{{PARTITIONKEY}}" data-sortkey="{{SORTKEY}}">
            {{FIELDS_HTML}}
            <td>
                <div class="gs-icons">
                        <a href="javascript:void(0)" onclick="dynamodb_EditItem(event)" class="neon-green lnk-dynamodb-edit" title="Edit">
                        <i class="fa-regular fa-pen-to-square"></i>
                    </a>
                    <a href="javascript:void(0)" class="red lnk-dynamodb-delete" title="Delete">
                        <i class="fa-solid fa-trash-can"></i>
                    </a>
                </div>
            </td>
        </tr>`;

    const DynamoDB_ItemFieldTemplate =
        `<td class="dynamodb-field" data-name="{{NAME}}" data-type="{{TYPE}}" data-value="{{VALUE}}">{{VALUE}}</td>`;

    const DynamoDB_FetchMoreButtonTemplate =
        `<div class="gs-loading-box">
            <a href="javascript:void(0)" onclick="dynamodb_FetchMoreItems()" class="gs-button lnk-dynamo-fetchmore" style="display: inline-block; margin: 8px">Load more</a>
        </div>`;

    var dynamodb_TableData = null;

    function dynamodb_EditItem(event)
    {
        var row = gs_GetParentTableRow(event.currentTarget, true);

        var partitionKey = dynamodb_TableData.partitionKey;
        var partitionKeyValue = row.getAttribute("data-partitionkey");
        var sortKey = dynamodb_TableData.sortKey;
        var sortKeyValue = row.getAttribute("data-sortkey");

        var item = dynamodb_TableData.items.find((item) => {
            var pk = item[partitionKey.name].value;
            var sk = !isNull(sortKey) ? item[sortKey.name].value : null;

            return pk == partitionKeyValue && (isNull(sortKey) || sk == sortKeyValue);
        });

        if(isNull(item))
        {
            gs_DisplayError(`Unable to find the item to edit (PartitionKey: "${partitionKeyValue}", SortKey: "${sortKeyValue}")`);
            return;
        }

        var fields = [];

        for(var i in dynamodb_TableData.attributeNames)
        {
            var name = dynamodb_TableData.attributeNames[i];
            var field = item[name];

            if(isNull(field))
                continue;

            var type = field.type;
            var value = field.value;

            fields.push({ name, type, value });
        }

        // Add value to keys
        partitionKey = {
            name: partitionKey.name,
            type: partitionKey.type,
            value: item[partitionKey.name].value
        };

        if(!isNull(sortKey))
        {
            sortKey = {
                name: sortKey.name,
                type: sortKey.type,
                value: item[sortKey.name].value
            };
        }

        showUpdateItemModal(fields, partitionKey, sortKey, async function(data) {
            var newItem = {};

            for(var i in data.fields)
            {
                var field = data.fields[i];

                if(isNull(field))
                    continue;

                newItem[field.name] = {
                    type: field.type,
                    value: field.value
                };
            }

            var response = await fetch(DYNAMODB_URL_UPDATE_ITEM, {
                method: "PATCH",
                headers: new Headers({ "Content-Type": "application/json" }),
                body: JSON.stringify({
                    partitionKey: {
                        name: data.currentPartitionKey.name,
                        value: {
                            type: data.currentPartitionKey.type,
                            value: data.currentPartitionKey.value
                        }
                    },
                    sortKey: isNull(sortKey) ? null : {
                        name: data.currentSortKey.name,
                        value: {
                            type: data.currentSortKey.type,
                            value: data.currentSortKey.value
                        }
                    },
                    item: newItem
                })
            });

            if(!response.ok)
            {
                await gsevent_FetchError(response);
                return;
            }

            // Update item in the displayed table
            for(var i in dynamodb_TableData.items)
            {
                var tableItem = dynamodb_TableData.items[i];
                
                if(isNull(tableItem))
                    continue;

                if(tableItem != item)
                    continue;

                dynamodb_TableData.items[i] = newItem;
                break;
            }

            dynamodb_RebuildItemsTable(dynamodb_TableData)
        });
    }

    async function dynamodb_UpdateItems()
    {
        var itemsList = document.getElementById("gs-dynamodb-items-list");
        itemsList.innerHTML = DynamoDB_LoadingTemplate;

        var url = DYNAMODB_URL_GET_ITEMS
            .replace("__LIMIT__", 50)
            .replace("__LASTKEY__", "");

        var response = await fetch(url);

        if(!response.ok)
        {
            await gsevent_FetchError(response);
            return;
        }

        var data = await response.json();

        if(!dynamodb_ValidateTableData(data))
        {
            itemsList.innerHTML = 
                `<div class="error-container">
                    <h2 class="error-text">An error occurred:</h2>
                    <p class="error-text">Invalid data received from server</p>
                </div>`;
            return;
        }

        dynamodb_TableData = data;
        dynamodb_RebuildItemsTable(dynamodb_TableData);
    }

    async function dynamodb_FetchMoreItems()
    {
        var itemsList = document.getElementById("gs-dynamodb-items-list");
        var fetchMoreButton = itemsList.querySelector(".lnk-dynamo-fetchmore");

        if(!isNull(fetchMoreButton))
        {
            fetchMoreButton.removeAttribute("onclick");
            fetchMoreButton.innerHTML = `<img class="spinner" style="margin-top: 2px; margin-bottom: -2px" src="/img/loading_wheel.apng"/>Loading...`;
        }

        var url = DYNAMODB_URL_GET_ITEMS
            .replace("__LIMIT__", 50)
            .replace("__LASTKEY__", dynamodb_TableData?.lastEvaluatedKey ?? "");

        var response = await fetch(url);

        if(!response.ok)
        {
            await gsevent_FetchError(response);
            return;
        }

        var data = await response.json();

        if(!dynamodb_ValidateTableData(data))
        {
            gs_DisplayError("Invalid data received from server");
            return;
        }

        if(data.partitionKey.name != dynamodb_TableData.partitionKey.name
            || data.partitionKey.type != dynamodb_TableData.partitionKey.type
            || data.sortKey?.name != dynamodb_TableData.sortKey?.name
            || data.sortKey?.type != dynamodb_TableData.sortKey?.type)
        {
            // Base table structure has changed, reload page
            window.location.reload(true);
            return;
        }

        if(data.items.length <= 0)
            return;

        // Merge data
        data.items = dynamodb_TableData.items.concat(data.items);
        dynamodb_TableData = data;

        dynamodb_RebuildItemsTable(dynamodb_TableData);
    }

    function dynamodb_RebuildItemsTable(data)
    {
        if(!dynamodb_ValidateTableData(data))
            throw "Invalid table data";

        var partitionKey = data.partitionKey.name;
        var sortKey = data.sortKey?.name;

        var headersHTML = "";

        for(var i in data.attributeNames)
        {
            var attribute = data.attributeNames[i];

            if(isNull(attribute))
                continue;

            headersHTML += `<th>${gs_SanitizeHtml(attribute)}</th>\n`;
        }

        var itemsHTML = "";

        for(var i in data.items)
        {
            var item = data.items[i];

            if(isNull(item))
                continue;

            var fieldsHTML = "";

            for(var j in data.attributeNames)
            {
                var attribute = data.attributeNames[j];
                var field = item[attribute];

                if(isNull(field))
                    continue;

                // TODO: Type checking and value formatting
                fieldsHTML += gs_BuildTemplate(DynamoDB_ItemFieldTemplate, [
                    { name: "NAME", value: attribute },
                    { name: "TYPE",  value: field.type },
                    { name: "VALUE", value: field.value }
                ]);
            }

            itemsHTML += gs_BuildTemplate(DynamoDB_ItemTemplate, [
                { name: "PARTITIONKEY", value: item[partitionKey].value },
                { name: "SORTKEY",      value: item[sortKey]?.value },
                { name: "FIELDS_HTML",  value: fieldsHTML }
            ]);
        }

        var additionalHTML = "";

        if(!isNull(data.lastEvaluatedKey) && data.lastEvaluatedKey != "")
            additionalHTML += DynamoDB_FetchMoreButtonTemplate;

        var tableHTML = gs_BuildTemplate(DynamoDB_TableTemplate, [
            { name: "LASTKEY",         value: data.lastEvaluatedKey ?? "" },
            { name: "HEADERS_HTML",    value: headersHTML },
            { name: "BODY_HTML",       value: itemsHTML },
            { name: "ADDITIONAL_HTML", value: additionalHTML },
        ]);

        document.getElementById("gs-dynamodb-items-list").innerHTML = tableHTML;
    }

    function dynamodb_ValidateTableData(data)
    {
        return !isNull(data.partitionKey?.name)
            && !isNull(data.partitionKey?.type)
            && (isNull(data.sortKey) || (!isNull(data.sortKey.name) && !isNull(data.sortKey.type)))
            && !isNull(data.attributeNames)
            && Array.isArray(data.attributeNames)
            && !isNull(data.items)
            && Array.isArray(data.items);
    }

    dynamodb_UpdateItems();
</script>
